// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SessionDaoBase.vsl in andromda-ejb3-cartridge.
//
package ru.codemasters.shop.domain;

/**
 * <p>
 * Base EJB3 DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>ru.codemasters.shop.domain.Category</code>.
 * </p>
 *
 * @see ru.codemasters.shop.domain.CategoryDao
 */
@javax.ejb.TransactionAttribute(javax.ejb.TransactionAttributeType.REQUIRED)
@javax.ejb.Local({ru.codemasters.shop.domain.CategoryDao.class})
public abstract class CategoryDaoBase
    implements ru.codemasters.shop.domain.CategoryDao
{
    // ------ Session Context Injection ------
    
    @javax.annotation.Resource
    protected javax.ejb.SessionContext context;

    // ------ Persistence Context Injection --------

    /**
     * Inject persistence context testejb3     
     */
    @javax.persistence.PersistenceContext(unitName = "testejb3")    
    protected javax.persistence.EntityManager emanager;

    /**
     * @see ru.codemasters.shop.domain.CategoryDao#load(int,)
     */
    public Object load(final int transform, final java.lang.Long id)
        throws ru.codemasters.shop.domain.CategoryDaoException
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Category.load - 'id' can not be null");
        }
        try
        {
            final Object entity = (ru.codemasters.shop.domain.Category)emanager.find(ru.codemasters.shop.domain.Category.class, id);
            return transformEntity(transform, (ru.codemasters.shop.domain.Category)entity);
        }
        catch (Exception ex)
        {
            throw new ru.codemasters.shop.domain.CategoryDaoException(ex);
        }
    }

    /**
     * @see ru.codemasters.shop.domain.CategoryDao#load()
     */
    public ru.codemasters.shop.domain.Category load( final java.lang.Long id)
        throws ru.codemasters.shop.domain.CategoryDaoException
    {
        return (ru.codemasters.shop.domain.Category)this.load(TRANSFORM_NONE, id);
    }

    /**
     * @see ru.codemasters.shop.domain.CategoryDao#loadAll()
     */
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<ru.codemasters.shop.domain.Category> loadAll()
        throws ru.codemasters.shop.domain.CategoryDaoException
    {
        return (java.util.Collection<ru.codemasters.shop.domain.Category>)this.loadAll(TRANSFORM_NONE);
    }

    /**
     * @see ru.codemasters.shop.domain.CategoryDao#loadAll(int)
     */
    public java.util.Collection loadAll(final int transform)
        throws ru.codemasters.shop.domain.CategoryDaoException
    {
        try
        {
            javax.persistence.Query query = emanager.createNamedQuery("Category.findAll");
            java.util.List<ru.codemasters.shop.domain.Category> results = query.getResultList();
            this.transformEntities(transform, results);
            return results;
        }
        catch (Exception ex)
        {
            throw new ru.codemasters.shop.domain.CategoryDaoException(ex);
        }
    }

    /**
     * @see ru.codemasters.shop.domain.CategoryDao#create(ru.codemasters.shop.domain.Category)
     */
    public ru.codemasters.shop.domain.Category create(ru.codemasters.shop.domain.Category category)
        throws ru.codemasters.shop.domain.CategoryDaoException
    {
        return (ru.codemasters.shop.domain.Category)this.create(TRANSFORM_NONE, category);
    }

    /**
     * @see ru.codemasters.shop.domain.CategoryDao#create(int transform, ru.codemasters.shop.domain.Category)
     */
    public Object create(final int transform, final ru.codemasters.shop.domain.Category category)
        throws ru.codemasters.shop.domain.CategoryDaoException
    {
        if (category == null)
        {
            throw new IllegalArgumentException(
                "Category.create - 'category' can not be null");
        }
        
        try
        {
            emanager.persist(category);
            emanager.flush();
            return this.transformEntity(transform, category);
        }
        catch (Exception ex)
        {
            throw new ru.codemasters.shop.domain.CategoryDaoException(ex);
        }
    }

    /**
     * @see ru.codemasters.shop.domain.CategoryDao#create(java.util.Collection<ru.codemasters.shop.domain.Category>)
     */
    @SuppressWarnings({"unchecked"})
    public java.util.Collection<ru.codemasters.shop.domain.Category> create(final java.util.Collection<ru.codemasters.shop.domain.Category> entities)
        throws ru.codemasters.shop.domain.CategoryDaoException
    {
        return create(TRANSFORM_NONE, entities);
    }

    /**
     * @see ru.codemasters.shop.domain.CategoryDao#create(int, java.util.Collection<ru.codemasters.shop.domain.Category>)
     */
    @SuppressWarnings({"unchecked"})
    public java.util.Collection create(final int transform, final java.util.Collection<ru.codemasters.shop.domain.Category> entities)
        throws ru.codemasters.shop.domain.CategoryDaoException
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Category.create - 'entities' can not be null");
        }
        java.util.Collection results = new java.util.ArrayList();
        try
        {
	        for (final java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
	        {
	            results.add(create(transform, (ru.codemasters.shop.domain.Category)entityIterator.next()));
	        }
	    }
	    catch (Exception ex)
	    {
	        throw new ru.codemasters.shop.domain.CategoryDaoException(ex);
	    }
        return results;
    }

    /**
     * @see ru.codemasters.shop.domain.CategoryDao#create(java.lang.String)
     */
    public ru.codemasters.shop.domain.Category create(
        java.lang.String Name)
        throws ru.codemasters.shop.domain.CategoryDaoException
    {
        return (ru.codemasters.shop.domain.Category)this.create(TRANSFORM_NONE, Name);
    }

    /**
     * @see ru.codemasters.shop.domain.CategoryDao#create(int, java.lang.String)
     */
    public Object create(
        final int transform,
        java.lang.String Name)
        throws ru.codemasters.shop.domain.CategoryDaoException
    {
        ru.codemasters.shop.domain.Category entity = new ru.codemasters.shop.domain.Category();
        entity.setName(Name);
        return this.create(transform, entity);
    }

    /**
     * @see ru.codemasters.shop.domain.CategoryDao#update(ru.codemasters.shop.domain.Category)
     */
    public void update(ru.codemasters.shop.domain.Category category)
        throws ru.codemasters.shop.domain.CategoryDaoException
    {
        if (category == null)
        {
            throw new IllegalArgumentException(
                "Category.update - 'category' can not be null");
        }
        try
        {
            emanager.merge(category);
            emanager.flush();
        }
        catch (Exception ex)
        {
            throw new ru.codemasters.shop.domain.CategoryDaoException(ex);
        }
    }

    /**
     * @see ru.codemasters.shop.domain.CategoryDao#update(java.util.Collection<ru.codemasters.shop.domain.Category>)
     */
    public void update(final java.util.Collection<ru.codemasters.shop.domain.Category> entities)
        throws ru.codemasters.shop.domain.CategoryDaoException
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Category.update - 'entities' can not be null");
        }
        try
        {
		    for (final java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
		    {
		        update((ru.codemasters.shop.domain.Category)entityIterator.next());
		    }
		}
		catch (Exception ex)
		{
		    throw new ru.codemasters.shop.domain.CategoryDaoException(ex);
		}
    }

    /**
     * @see ru.codemasters.shop.domain.CategoryDao#remove(ru.codemasters.shop.domain.Category)
     */
    public void remove(ru.codemasters.shop.domain.Category category)
        throws ru.codemasters.shop.domain.CategoryDaoException
    {
        if (category == null)
        {
            throw new IllegalArgumentException(
                "Category.remove - 'category' can not be null");
        }
        try
        {
            emanager.remove(category);
            emanager.flush();
        }
        catch (Exception ex)
        {
            throw new ru.codemasters.shop.domain.CategoryDaoException(ex);
        }
    }

    /**
     * @see ru.codemasters.shop.domain.CategoryDao#remove(java.lang.Long)
     */
    public void remove(java.lang.Long id)
        throws ru.codemasters.shop.domain.CategoryDaoException
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Category.remove - 'id' can not be null");
        }
        try
        {
	        final ru.codemasters.shop.domain.Category entity = this.load(id);
	        if (entity != null)
	        {
	            this.remove(entity);
	        }
	    }
	    catch (Exception ex)
	    {
	        throw new ru.codemasters.shop.domain.CategoryDaoException(ex);
	    }
    }

    /**
     * @see ru.codemasters.shop.domain.CategoryDao#remove(java.util.Collection<ru.codemasters.shop.domain.Category>)
     */
    public void remove(java.util.Collection<ru.codemasters.shop.domain.Category> entities)
        throws ru.codemasters.shop.domain.CategoryDaoException
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Category.remove - 'entities' can not be null");
        }
        try
        {
	        for (final java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
	        {
	            remove((ru.codemasters.shop.domain.Category)entityIterator.next());
	        }
	    }
	    catch (Exception ex)
	    {
	        throw new ru.codemasters.shop.domain.CategoryDaoException(ex);
	    }
    }

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>ru.codemasters.shop.domain.CategoryDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link ru.codemasters.shop.domain.CategoryDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    protected Object transformEntity(final int transform, final ru.codemasters.shop.domain.Category entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int, ru.codemasters.shop.domain.Category)}
     * method. This method does not instantiate a new collection.
     * <p/>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>ru.codemasters.shop.domain.CategoryDao</code>
     * @param entities the collection of entities to transform
     * @return the same collection as the argument, but this time containing the transformed entities
     * @see #transformEntity(int, ru.codemasters.shop.domain.Category)
     */
    protected void transformEntities(final int transform, final java.util.Collection entities)
    {
        switch (transform)
        {
            case TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

}